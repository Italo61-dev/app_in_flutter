1. Container
Você usa o Container em vários pontos para definir dimensões, cores de fundo e layouts:

No Task, o Container é usado para envolver os outros widgets e definir a altura (height) e a cor de fundo (color).
Exemplo:

Container(
  color: Colors.blue, // Cor de fundo
  height: 140, // Altura
)

2. Stack
Você usa o Stack dentro do Container para empilhar widgets sobrepostos:

Isso permite que você coloque a Container azul (fundo) e a Container branca com a Row e outros widgets sobre ela.
Exemplo:
Stack(
  children: [
    Container(color: Colors.blue, height: 140),
    Container(
      color: Colors.white,
      height: 100,
      child: Row(
        // Conteúdo da Row
      ),
    ),
  ],
)

3. Row
O widget Row é utilizado para organizar os elementos na horizontal dentro do Container branco:

Você alinha os widgets (um Container para o ícone de ação, o nome da tarefa e o ElevatedButton) horizontalmente.
Propriedades importantes:
mainAxisAlignment é usado para espaçar os elementos horizontalmente.
children é a lista de widgets a serem exibidos na linha.
Exemplo:
Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  children: [
    // Widgets dentro da Row
  ],
)

4. Text e TextStyle
O widget Text é usado para exibir o nome da tarefa. A pTextStyle para configurar a fonte e comportamento do texto.

TextStyle é utilizado para definir o tamanho da fonte, overflow do texto e outras propriedades como cor.
Exemplo:

Text(
  nome,  // Nome da tarefa
  style: TextStyle(
    fontSize: 24,  // Tamanho da fonte
    overflow: TextOverflow.ellipsis,  // Quando o texto ultrapassar o limite, será cortado
  ),
)

5. ElevatedButton
O ElevatedButton é utilizado para adicionar um botão estilizado com cor de fundo, forma arredondada e um ícone.

Propriedades importantes:
onPressed define a ação quando o botão é pressionado.
backgroundColor define a cor do botão.
shape define o formato arredondado com o borderRadius.
child contém o ícone que aparece no botão.
Exemplo:
dart
Copiar
Editar
ElevatedButton(
  onPressed: () {},
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.blue,  // Cor do botão
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(8),  // Bordas arredondadas
    ),
  ),
  child: Icon(
    Icons.arrow_drop_up,  // Ícone do botão
    color: Colors.white,   // Cor do ícone
  ),
)

6. StatelessWidget
A classe Task é um exemplo de StatelessWidget. Ela define um widget imutável, onde o conteúdo não muda após a construção.

Você passa o nome da tarefa como parâmetro e exibe isso dentro do widget.
Exemplo:
dart
Copiar
Editar
class Task extends StatelessWidget {
  final String nome;  // Tarefa

  const Task(this.nome, {super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),  // Espaçamento
      child: Container(
        // Layout da tarefa
      ),
    );
  }
}

7. Padding
Você usou o widget Padding para adicionar espaçamento interno em volta de cada Task, criando um afastamento entre os itens na lista.

Exemplo:
dart
Copiar
Editar
Padding(
  padding: const EdgeInsets.all(8.0),  // Espaçamento
  child: Container(
    // Conteúdo da tarefa
  ),
)

8. ListView
O ListView é utilizado para criar uma lista rolável de tarefas. Ele recebe uma lista de widgets Task como filhos, e cada um exibe uma tarefa diferente.

Exemplo:
dart
Copiar
Editar
ListView(
  children: [
    Task('Aprender Flutter.'),
    Task('Ler um livro.'),
    Task('Fazer uma caminhada.'),
  ],
)

9. Scaffold
O Scaffold é o widget principal da estrutura de layout do Flutter. Ele organiza a AppBar, o body da aplicação e o floatingActionButton.

AppBar: Barra superior que contém o título "Tarefas".
FloatingActionButton: Botão flutuante que aparece sobre o layout.
Exemplo:
dart
Copiar
Editar
home: Scaffold(
  appBar: AppBar(
    backgroundColor: Colors.blue,  // Cor de fundo da AppBar
    title: Text('Tarefas', style: TextStyle(color: Colors.white)),
  ),
  body: ListView(
    children: [
      Task('Aprender Flutter.'),
      Task('Ler um livro.'),
      Task('Fazer uma caminhada.'),
    ],
  ),
  floatingActionButton: FloatingActionButton(
    onPressed: () {},
    backgroundColor: Colors.blue,  // Cor do botão
    shape: CircleBorder(),  // Forma circular
    child: Icon(Icons.add),
  ),
)

10. StatefulWidget
O StatefulWidget é um tipo de widget no Flutter que pode mudar de estado durante a execução do aplicativo. Ele é composto por duas classes:

Classe do Widget: Estende StatefulWidget e é imutável.
Classe de Estado: Estende State e armazena dados mutáveis.

Estrutura Básica de um StatefulWidget

class MeuWidget extends StatefulWidget {
  @override
  _MeuWidgetState createState() => _MeuWidgetState();
}

class _MeuWidgetState extends State<MeuWidget> {
  int contador = 0;

  void incrementar() {
    setState(() {
      contador++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('Contador: $contador'),
        ElevatedButton(
          onPressed: incrementar,
          child: Text('Incrementar'),
        ),
      ],
    );
  }
}

Características do StatefulWidget
✔️ Permite alteração de estado com setState()
✔️ Mantém os dados entre reconstruções
✔️ Útil para animações, interações do usuário e carregamento de dados

10. Image
A classe Image é usada para exibir imagens no Flutter. Ela suporta várias fontes de imagem, como assets, rede, memória e arquivos locais.

📌 Modos de Carregamento
Imagem de Assets (Pasta assets/)
Image.asset('assets/minha_imagem.png')

Imagem da Internet
Image.network('https://exemplo.com/imagem.png')

Imagem do Armazenamento Local
Image.file(File('/caminho/para/imagem.png'))

Imagem da Memória (Bytes)
Image.memory(Uint8List.fromList(meusBytes))

📌 Propriedades úteis da classe Image
fit: Ajusta a imagem dentro do espaço disponível (BoxFit.cover, BoxFit.contain, etc.)
width e height: Definem tamanho específico
color: Aplica uma cor à imagem
opacity: Controla a opacidade da imagem
loadingBuilder: Mostra um indicador de carregamento

📌 Exemplo Completo

Image.network(
  'https://exemplo.com/imagem.png',
  width: 200,
  height: 200,
  fit: BoxFit.cover,
  loadingBuilder: (context, child, progress) {
    if (progress == null) return child;
    return CircularProgressIndicator();
  },
)


💡 Dica: Para carregar imagens rapidamente, use precacheImage().

11. Keyboard type
o keyboard Type é usado para facilitar a vida do usuário no campo do teclado, de acordo com o formulário:
    TextFormField(
        keyboardType: TextInputType.number,
    ),

12. key
O key serve para usar em formulário, para impedir de enviá-lo vazio, ele fica de olho no estado, para poder enviar:

    void main(
    final _formKey = GlobalKey<FormState>();
    ),

13. Snakbar
Responsavel por informa que algo foi adicionado, evitadando quer o usuário, adicione a mesma atividade varias vezes:
Ele pertence ao Scaffold.

ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Nova tarefa adicionada'),
      ),
    );

14. SingleChildScrollView
O SingleChildScrollView é um widget do Flutter usado para permitir rolagem quando o conteúdo excede o tamanho da tela.
Você envolve ele no container pai, tornando o container filho do SingleChildScrollView. Se a lista for longa, prefira ListView para melhor desempenho.

15. validador
Aprendemos que é uma prática inadequada enviar nulos em um formulário. Não queremos exibir, por exemplo, uma tarefa sem título ou com outra informação faltando. Para evitar isso, utilizamos o validator - parâmetro do TextFormField. Dentro do validator, criamos uma condição para verificar se o campo contém uma informação ou um nulo.

16. Form
Para as validações acontecer precisa colocar a função maior como Foem, pois ela que fica de olho.
Precisa criar uma variavel

    final _formKey = GlobalKey<FormState>();

    Para ela assistir às validações.

17. Navigator
Navigator: Controla a pilha de telas (navegação entre elas).

18. Routes
Routes: São como "endereços" das telas. Você pode nomeá-las para facilitar a navegação.

19. App State e InheritedWidget
Resumo sobre App State e InheritedWidget
✅ App State → Armazena e gerencia dados globais do app, permitindo acesso e modificação de qualquer tela.
✔ Evita passar valores manualmente entre widgets.
✔ Atualiza automaticamente os widgets que usam esse estado.
✔ Exemplos: Usuário logado, tema do app, carrinho de compras.

✅ InheritedWidget → Modo nativo do Flutter para compartilhar estado entre widgets sem precisar de pacotes.
✔ Bom para estados leves (tema, idioma).
✔ Pode ser substituído por Provider (mais fácil de usar).

✅ Dica:
Para apps pequenos → InheritedWidget pode ser suficiente.
Para apps médios/grandes → Use Provider, Riverpod ou Bloc para melhor organização.

🚀 App State evita repetição de código e deixa o app mais eficiente!


20. BuilContext
Em Flutter, BuildContext é um conceito fundamental que representa a localização de um widget na árvore de widgets. Ele é frequentemente usado para acessar informações ou funcionalidades específicas do Flutter, como recursos locais, temas, tradução de textos e para construir a hierarquia de widgets.

Algumas coisas importantes a se saber sobre o BuildContext:

Identificação na árvore de widgets: cada widget em Flutter tem seu próprio contexto. O BuildContext identifica a posição de um widget específico na hierarquia de widgets. É uma maneira de rastrear a localização relativa do widget na árvore de widgets.

Acesso a recursos locais: podemos usar o BuildContext para acessar recursos locais, como imagens, fontes, cores, textos traduzidos e muito mais. Isso é feito usando métodos como MediaQuery.of(context) para obter informações sobre o tamanho da tela, Theme.of(context) para obter informações sobre o tema atual, Scaffold.of(context) para obter um objeto Scaffold pai e assim por diante.

Construção de widgets: o BuildContext é frequentemente usado ao construir widgets em Flutter. O construtor do widget geralmente recebe um parâmetro BuildContext, que é usado para fornecer informações sobre a localização do widget na árvore de widgets.

Navegação e roteamento: ao construir aplicativos com navegação, o BuildContext também é usado para navegar entre telas ou rotas. Você pode usar o Navigator para adicionar, substituir ou remover telas da pilha de páginas (que é diferente de hierarquia de widgets), e o BuildContext é frequentemente usado como parte desse processo.

Passagem de contexto: em muitos casos, você precisará passar o BuildContext para widgets filhos, para que eles possam acessar informações relevantes. Por exemplo, ao criar uma função de callback para um botão, você pode passar o BuildContext para que o botão saiba onde ele está na árvore de widgets.

Aqui está um exemplo simples de como o BuildContext é usado ao construir um widget:

Widget build(BuildContext context) {
  return RaisedButton(
    onPressed: () {
      // Usando o context para acessar o tema atual
      Theme.of(context).textTheme.bodyText1;
      // Ou para navegar para outra tela
      Navigator.of(context).pushNamed('/outraTela');
    },
    child: Text('Clique em mim'),
  );
}

Em resumo, o BuildContext é uma parte crucial do desenvolvimento em Flutter, pois permite que você acesse recursos e informações relevantes à medida que constrói e gerência widgets na árvore de widgets.




